require "pyramid_params.jahh"
require "pyr_thash_shake256_robust.jahh"

export fn thash1_jazz(reg u64 inoutp, reg u64 pub_seedp,
                        reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] inout pub_seed;

	stack u32[8] addr;

	for i = 0 to PYR_N {
		a8 = (u8) [pub_seedp + i];
		pub_seed[i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = (u8) [inoutp + i];
		inout[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4*i];
		addr[i] = a32;
	}

	inout = thash1(inout, pub_seed, addr);

	for i = 0 to PYR_N {
		a8 = inout[i];
		(u8) [inoutp + i] = a8;
	}
}

export fn thash2_jazz(reg u64 inoutp, reg u64 pub_seedp,
                        reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] pub_seed;
	
	stack u8[2*PYR_N] inout;

	stack u32[8] addr;

	stack u64 s_inoutp;

	for i = 0 to PYR_N {
		a8 = (u8) [pub_seedp + i];
		pub_seed[i] = a8;
	}

	for i = 0 to 2*PYR_N {
		a8 = (u8) [inoutp + i];
		inout[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4*i];
		addr[i] = a32;
	}

	s_inoutp = inoutp;
	
	inout = thash2l(inout, pub_seed, addr);

	inoutp = s_inoutp;

	/* Only put back the return side. */
	for i = 0 to PYR_N {
		a8 = inout[i];
		(u8) [inoutp + i] = a8;
	}
}

export fn thashLEN_jazz(reg u64 outp, reg u64 inp, reg u64 pub_seedp,
                        reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] out pub_seed;

	stack u8[PYR_WOTS_BYTES] in;

	stack u32[8] addr;

	stack u64 s_outp;

	for i = 0 to PYR_N {
		a8 = (u8) [pub_seedp + i];
		pub_seed[i] = a8;
	}

	for i = 0 to PYR_WOTS_BYTES {
		a8 = (u8) [inp + i];
		in[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4*i];
		addr[i] = a32;
	}

	s_outp = outp;

	out = thashLEN(out, in, pub_seed, addr);

	outp = s_outp;

	for i = 0 to PYR_N {
		a8 = out[i];
		(u8) [outp + i] = a8;
	}
}