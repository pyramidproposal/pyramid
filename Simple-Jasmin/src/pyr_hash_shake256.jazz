require "pyramid_params.jahh"
require "pyr_hash_shake256.jahh"

export fn prf_jazz(reg u64 outp, reg u64 keyp, reg u64 pub_seedp, reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] out key pub_seed;

	stack u32[8] addr;

	stack u64 s_outp;

	for i = 0 to PYR_N {
		a8 = (u8) [keyp + i];
		key[i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = (u8) [pub_seedp + i];
		pub_seed[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4 * i];
		addr[i] = a32;
	}

	s_outp = outp;

	out = prf(out, key, pub_seed, addr);

	outp = s_outp;

	for i = 0 to PYR_N {
		a8 = out[i];
		(u8) [outp + i] = a8;
	}
}

export fn h_msg_jazz(reg u64 outp, reg u64 Rp,
                     reg u64 rootp, reg u64 addrp, reg u64 mp, reg u64 mlen)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] out R root;

	stack u32[8] addr;

	stack u64 s_outp;

	for i = 0 to PYR_N {
		a8 = (u8) [Rp + i];
		R[i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = (u8) [rootp + i];
		root[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4 * i];
		addr[i] = a32;
	}

	s_outp = outp;

	out = h_msg(out, R, root, addr, mp, mlen);

	outp = s_outp;

	for i = 0 to PYR_N {
		a8 = out[i];
		(u8) [outp + i] = a8;
	}
}

export fn fsg_jazz(reg u64 outp, reg u64 next_seedp, reg u64 inp,
                   reg u64 pkp, reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] out next_seed in pk;

	stack u32[8] addr;

	stack u64 s_outp s_next_seedp;

	for i = 0 to PYR_N {
		a8 = (u8) [inp + i];
		in[i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = (u8) [pkp + i];
		pk[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4*i];
		addr[i] = a32;
	}

	s_outp = outp;
	s_next_seedp = next_seedp;

	out, next_seed = fsg(out, next_seed, in, pk, addr);

	outp = s_outp;
	next_seedp = s_next_seedp;

	for i = 0 to PYR_N {
		a8 = out[i];
		(u8) [outp + i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = next_seed[i];
		(u8) [next_seedp + i] = a8;
	}
}

export fn fsg_0_jazz(reg u64 outp, reg u64 inp,
                     reg u64 pkp, reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] out in pk;

	stack u32[8] addr;

	stack u64 s_outp;

	for i = 0 to PYR_N {
		a8 = (u8) [inp + i];
		in[i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = (u8) [pkp + i];
		pk[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4*i];
		addr[i] = a32;
	}

	s_outp = outp;

	out = fsg_0(out, in, pk, addr);

	outp = s_outp;

	for i = 0 to PYR_N {
		a8 = out[i];
		(u8) [outp + i] = a8;
	}
}

export fn fsg_1_jazz(reg u64 next_seedp, reg u64 inp,
                     reg u64 pkp, reg u64 addrp)
{
	inline int i;

	reg u8 a8;

	reg u32 a32;

	stack u8[PYR_N] next_seed in pk;

	stack u32[8] addr;

	stack u64 s_next_seedp;

	for i = 0 to PYR_N {
		a8 = (u8) [inp + i];
		in[i] = a8;
	}

	for i = 0 to PYR_N {
		a8 = (u8) [pkp + i];
		pk[i] = a8;
	}

	for i = 0 to 8 {
		a32 = (u32) [addrp + 4*i];
		addr[i] = a32;
	}

	s_next_seedp = next_seedp;

	next_seed = fsg_1(next_seed, in, pk, addr);

	next_seedp = s_next_seedp;

	for i = 0 to PYR_N {
		a8 = next_seed[i];
		(u8) [next_seedp + i] = a8;
	}
}
