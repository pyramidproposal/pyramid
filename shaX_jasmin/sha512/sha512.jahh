u64[80] K = {0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f,
             0xe9b5dba58189dbbc, 0x3956c25bf348b538, 0x59f111f1b605d019,
             0x923f82a4af194f9b, 0xab1c5ed5da6d8118, 0xd807aa98a3030242,
             0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
             0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235,
             0xc19bf174cf692694, 0xe49b69c19ef14ad2, 0xefbe4786384f25e3,
             0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65, 0x2de92c6f592b0275,
             0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
             0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f,
             0xbf597fc7beef0ee4, 0xc6e00bf33da88fc2, 0xd5a79147930aa725,
             0x06ca6351e003826f, 0x142929670a0e6e70, 0x27b70a8546d22ffc,
             0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
             0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6,
             0x92722c851482353b, 0xa2bfe8a14cf10364, 0xa81a664bbc423001,
             0xc24b8b70d0f89791, 0xc76c51a30654be30, 0xd192e819d6ef5218,
             0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
             0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99,
             0x34b0bcb5e19b48a8, 0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb,
             0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3, 0x748f82ee5defb2fc,
             0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
             0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915,
             0xc67178f2e372532b, 0xca273eceea26619c, 0xd186b8c721c0c207,
             0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178, 0x06f067aa72176fba,
             0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
             0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
             0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
             0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

u64[8] IV = {0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b,
             0xa54ff53a5f1d36f1, 0x510e527fade682d1, 0x9b05688c2b3e6c1f,
             0x1f83d9abfb41bd6b, 0x5be0cd19137e2179};

inline fn ROTR(reg u64 x, inline int i) -> reg u64 {
  reg u64 a;

  _, _, a = #ROR_64(x, i);

  return a;
}

/* (4.8) Ch(x, y, z) = (x & y) ^ (!x & z) */
inline fn Ch(reg u64 x y z) -> reg u64{
  reg u64 a b;

  a = x;
  a &= y;
  b = x;
  b = !b;
  b &= z;
  a ^= b;
  
  return a;
}

/* (4.9) Maj(x, y, z) = (x & y) ^ (x & z) ^ (y & z) */
inline fn Maj(reg u64 x y z) -> reg u64{
  reg u64 a b;

  a = x;
  a &= y;
  b = x;
  b &= z;
  a ^= b;
  b = y;
  b &= z;
  a ^= b;
  
  return a;
}

/* (4.10) S_0(x) = ROTR(x, 28) ^ ROTR(x, 34) ^ ROTR(x, 39) */
inline fn Sigma_0(reg u64 x) -> reg u64{
  reg u64 a b;

  a = x;
  a = ROTR(a, 28);
  b = x;
  b = ROTR(b, 34);
  a ^= b;
  b = x;
  b = ROTR(b, 39);
  a ^= b;
  
  return a;
}

/* (4.11) S_1(x) = ROTR(x, 14) ^ ROTR(x, 18) ^ ROTR(x, 41) */
inline fn Sigma_1(reg u64 x) -> reg u64{
  reg u64 a b;

  a = x;
  a = ROTR(a, 14);
  b = x;
  b = ROTR(b, 18);
  a ^= b;
  b = x;
  b = ROTR(b, 41);
  a ^= b;
  
  return a;
}

/* (4.12) s_0(x) = ROTR(x, 1) ^ ROTR(x, 8) ^ SHR(x, 7) */
inline fn sigma_0(reg u64 x) -> reg u64{
  reg u64 a b;

  a = x;
  a = ROTR(a, 1);
  b = x;
  b = ROTR(b, 8);
  a ^= b;
  b = x;
  b >>= 7;
  a ^= b;
  
  return a;
}

/* (4.13) s_1(x) = ROTR(x, 19) ^ ROTR(x, 61) ^ SHR(x, 6) */
inline fn sigma_1(reg u64 x) -> reg u64{
  reg u64 a b;

  a = x;
  a = ROTR(a, 19);
  b = x;
  b = ROTR(b, 61);
  a ^= b;
  b = x;
  b >>= 6;
  a ^= b;
  
  return a;
}


inline fn T_1(reg u64 h e f g K_t W_t) -> reg u64{
  reg u64 res total;

  total = h;
  res = Sigma_1(e);
  total += res;
  res = Ch(e, f, g);
  total += res;
  total += K_t;
  total += W_t;

  return total;
}


inline fn T_2(reg u64 a b c) -> reg u64{
  reg u64 res total;

  total = Sigma_0(a);
  res = Maj(a, b, c);
  total += res;

  return total;
}

fn step(reg u64 a b c d e f g h K_t W_t)
-> reg u64, reg u64, reg u64, reg u64, reg u64, reg u64, reg u64, reg u64
{
  reg u64 T_1 T_2 S0 S1 maj ch;
  reg u64 a_ b_ c_ d_ e_ f_ g_ h_;

  /* T_1 = h + Sigma_1(e) + Ch(e, f, g) + K_t + W_t */
  T_1 = h;
  S0 = Sigma_1(e);
  T_1 += S0;
  ch = Ch(e, f, g);
  T_1 += ch;
  T_1 += K_t;
  T_1 += W_t;

  /* T_2 = Sigma_0(a) + Maj(a, b, c) */
  S1 = Sigma_0(a);
  T_2 = S1;
  maj = Maj(a, b, c);
  T_2 += maj;

  /* h = g; g = f; f = e; e = d + T_1; d = c; c = b; b = a; a = T_1 + T_2; */
  h_ = g;
  g_ = f;
  f_ = e;
  e_ = d;
  e_ += T_1;
  d_ = c;
  c_ = b;
  b_ = a;
  a_ = T_1;
  a_ += T_2;

  return a_, b_, c_, d_, e_, f_, g_, h_;
}

inline fn iterate_hash(reg const ptr u64[16] M, reg ptr u64[8] H) -> reg ptr u64[8]{
  inline int t;
  stack u64[80] W;
  reg u64 a b c d e f g h;
  reg u64 s0 s1;
  reg u64 K_t W_t;
  reg u64 tmp;

  /* 1. Prepare the message schedule, {W_t}:  */
  /* 0<=t<=15: W_t = M_t */
  for t = 0 to 16 {
    tmp = M[t];
    W[t] = tmp;
  }

  /* 16<=t<=79: W_t = sigma_1(W_(t-2)) + W_(t-1) + sigma_0(W_(t - 15)) + W_(t-16) */
  for t = 16 to 80 {
    tmp = W[t-2];
    s1 = sigma_1(tmp);
    W_t = s1;
    W_t += W[t-7];
    tmp = W[t-15];
    s0 = sigma_0(tmp);
    W_t += s0;
    W_t += W[t-16];
    W[t] = W_t;
  }

  /* 2. Initialize  the  eight  working  variables, with  the  (i-1)st  hash value: */
  a = H[0];
  b = H[1];
  c = H[2];
  d = H[3];
  e = H[4];
  f = H[5];
  g = H[6];
  h = H[7];

  /* 3. For t=0 to 79: */
  for t = 0 to 80 {
    K_t = K[t];
    W_t = W[t];
    a, b, c, d, e, f, g, h = step(a, b, c, d, e, f, g, h, K_t, W_t);
  }

  /* 4. Compute the ith intermediate hash value H^i: */
  H[0] += a;
  H[1] += b;
  H[2] += c;
  H[3] += d;
  H[4] += e;
  H[5] += f;
  H[6] += g;
  H[7] += h;

  return H;
}
