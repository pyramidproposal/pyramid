require "crypto_hashblocks.jahh"

/* Note: sha256.jahh includes u64[8] IV. */
u8[64] iv = {
  0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08,
  0xbb, 0x67, 0xae, 0x85, 0x84, 0xca, 0xa7, 0x3b,
  0x3c, 0x6e, 0xf3, 0x72, 0xfe, 0x94, 0xf8, 0x2b,
  0xa5, 0x4f, 0xf5, 0x3a, 0x5f, 0x1d, 0x36, 0xf1,
  0x51, 0x0e, 0x52, 0x7f, 0xad, 0xe6, 0x82, 0xd1,
  0x9b, 0x05, 0x68, 0x8c, 0x2b, 0x3e, 0x6c, 0x1f,
  0x1f, 0x83, 0xd9, 0xab, 0xfb, 0x41, 0xbd, 0x6b,
  0x5b, 0xe0, 0xcd, 0x19, 0x13, 0x7e, 0x21, 0x79
};

fn crypto_hash(reg ptr u8[64] out, reg u64 in, reg u64 inlen)
-> reg ptr u8[64], reg u32
{
  inline int i;
  reg u64 j;
  reg u32 t32 inlen32;
  reg u8 t8;
  stack u8[64] h;
  stack u8[256] padded;
  reg u64 bytes bytes_; /* bytes_ for similarity c (not required)*/
  
  stack u64 s_bytes;
  stack ptr u8[64] s_out;

  bytes = inlen;

  s_bytes = bytes;
  s_out = out;

  for i = 0 to 64 {
    t8 = iv[i];
    h[i] = t8;
  }

  /* c implementation discards inlen32. */
  h, in, inlen32 = crypto_hashblocks(h, in, inlen);
  inlen = (64u)inlen32;

  j = 0;
  while(j < inlen){
    t8 = (u8)[in + j];
    padded[(int) j] = t8;
    j += 1;
  }
  padded[(int) inlen] = 0x80;

  bytes = s_bytes;
  if(inlen < 112){
  
    j = inlen;
    j += 1;
    while(j < 119){
      padded[(int)j] = 0;
      j += 1;
    }

    bytes_ = bytes;
    bytes_ <<= 3;
    padded[127] = bytes_;
    bytes >>= 5;
    for i = 1 to 8 {
      padded[127 - i] = bytes;
      bytes >>= 8;
    }
    padded[119] = bytes;
    
    h = crypto_hashblock(h, padded[0:128]);
  } else {
  
    j = inlen;
    j += 1;
    while(j < 247){
      padded[(int)j] = 0;
      j += 1;
    }

    bytes_ = bytes;
    bytes_ <<= 3;
    padded[255] = bytes_;
    bytes >>= 5;
    for i = 1 to 8 {
      padded[255 - i] = bytes;
      bytes >>= 8;
    }
    padded[247] = bytes;
    
    h = crypto_hashblock(h, padded[0:128]);
    h = crypto_hashblock(h, padded[128:128]);
  }

  out = s_out;
  for i = 0 to 64 {
    t8 = h[i];
    out[i] = t8;
  }
  
  t32 = 0;
  return out, t32;
}