u32[64] K = {
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
  0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
  0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
  0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
  0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

u32[8] IV = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};

inline fn ROTR(reg u32 x, inline int i) -> reg u32 {
  reg u32 a;

  _, _, a = #ROR_32(x, i);

  return a;
}

/* (4.2) Ch(x, y, z) = (x & y) ^ (!x & z) */
inline fn Ch(reg u32 x y z) -> reg u32{
  reg u32 a b;

  a = x;
  a &= y;
  b = x;
  b = !b;
  b &= z;
  a ^= b;
  
  return a;
}

/* (4.3) Maj(x, y, z) = (x & y) ^ (x & z) ^ (y & z) */
inline fn Maj(reg u32 x y z) -> reg u32{
  reg u32 a b;

  a = x;
  a &= y;
  b = x;
  b &= z;
  a ^= b;
  b = y;
  b &= z;
  a ^= b;
  
  return a;
}

/* (4.4) S_0(x) = ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22) */
inline fn Sigma_0(reg u32 x) -> reg u32{
  reg u32 a b;

  a = x;
  a = ROTR(a, 2);
  b = x;
  b = ROTR(b, 13);
  a ^= b;
  b = x;
  b = ROTR(b, 22);
  a ^= b;
  
  return a;
}

/* (4.5) S_1(x) = ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25) */
inline fn Sigma_1(reg u32 x) -> reg u32{
  reg u32 a b;

  a = x;
  a = ROTR(a, 6);
  b = x;
  b = ROTR(b, 11);
  a ^= b;
  b = x;
  b = ROTR(b, 25);
  a ^= b;
  
  return a;
}

/* (4.6) s_0(x) = ROTR(x, 7) ^ ROTR(x, 18) ^ SHR(x, 3) */
inline fn sigma_0(reg u32 x) -> reg u32{
  reg u32 a b;

  a = x;
  a = ROTR(a, 7);
  b = x;
  b = ROTR(b, 18);
  a ^= b;
  b = x;
  b >>= 3;
  a ^= b;
  
  return a;
}

/* (4.7) s_1(x) = ROTR(x, 17) ^ ROTR(x, 19) ^ SHR(x, 10) */
inline fn sigma_1(reg u32 x) -> reg u32{
  reg u32 a b;

  a = x;
  a = ROTR(a, 17);
  b = x;
  b = ROTR(b, 19);
  a ^= b;
  b = x;
  b >>= 10;
  a ^= b;
  
  return a;
}


inline fn T_1(reg u32 h e f g K_t W_t) -> reg u32{
  reg u32 res total;

  total = h;
  res = Sigma_1(e);
  total += res;
  res = Ch(e, f, g);
  total += res;
  total += K_t;
  total += W_t;

  return total;
}


inline fn T_2(reg u32 a b c) -> reg u32{
  reg u32 res total;

  total = Sigma_0(a);
  res = Maj(a, b, c);
  total += res;

  return total;
}

fn step(reg u32 a b c d e f g h K_t W_t)
-> reg u32, reg u32, reg u32, reg u32, reg u32, reg u32, reg u32, reg u32
{
  reg u32 T_1 T_2 S0 S1 maj ch;
  reg u32 a_ b_ c_ d_ e_ f_ g_ h_;

  /* T_1 = h + Sigma_1(e) + Ch(e, f, g) + K_t + W_t */
  T_1 = h;
  S0 = Sigma_1(e);
  T_1 += S0;
  ch = Ch(e, f, g);
  T_1 += ch;
  T_1 += K_t;
  T_1 += W_t;

  /* T_2 = Sigma_0(a) + Maj(a, b, c) */
  S1 = Sigma_0(a);
  T_2 = S1;
  maj = Maj(a, b, c);
  T_2 += maj;

  /* h = g; g = f; f = e; e = d + T_1; d = c; c = b; b = a; a = T_1 + T_2; */
  h_ = g;
  g_ = f;
  f_ = e;
  e_ = d;
  e_ += T_1;
  d_ = c;
  c_ = b;
  b_ = a;
  a_ = T_1;
  a_ += T_2;

  return a_, b_, c_, d_, e_, f_, g_, h_;
}

inline fn iterate_hash(reg const ptr u32[16] M, reg ptr u32[8] H) -> reg ptr u32[8]{
  inline int t;
  stack u32[64] W;
  reg u32 a b c d e f g h;
  reg u32 s0 s1;
  reg u32 K_t W_t;
  reg u32 tmp;

  /* 1. Prepare the message schedule, {W_t}:  */
  /* 0<=t<=15: W_t = M_t */
  for t = 0 to 16 {
    tmp = M[t];
    W[t] = tmp;
  }

  /* 16<=t<=63: W_t = sigma_1(W_(t-2)) + W_(t-1) + sigma_0(W_(t - 15)) + W_(t-16) */
  for t = 16 to 64 {
    tmp = W[t-2];
    s1 = sigma_1(tmp);
    W_t = s1;
    W_t += W[t-7];
    tmp = W[t-15];
    s0 = sigma_0(tmp);
    W_t += s0;
    W_t += W[t-16];
    W[t] = W_t;
  }

  /* 2. Initialize  the  eight  working  variables, with  the  (i-1)st  hash value: */
  a = H[0];
  b = H[1];
  c = H[2];
  d = H[3];
  e = H[4];
  f = H[5];
  g = H[6];
  h = H[7];

  /* 3. For t=0 to 63: */
  for t = 0 to 64 {
    K_t = K[t];
    W_t = W[t];
    a, b, c, d, e, f, g, h = step(a, b, c, d, e, f, g, h, K_t, W_t);
  }

  /* 4. Compute the ith intermediate hash value H^i: */
  H[0] += a;
  H[1] += b;
  H[2] += c;
  H[3] += d;
  H[4] += e;
  H[5] += f;
  H[6] += g;
  H[7] += h;

  return H;
}